t = float(23.456)
r = int("1234")
# new_list = [<элемент>, <элемент>, <элемент>, <элемент>, <элемент>] 
russian_alphabet = ['а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я'] 
print(russian_alphabet[2])  # Напечатать содержимое элемента с индексом 2 
countdown = [5, 4, 3, 2, 1, 0] 
pithagoras_2 = [2*1, 2*2, 2*3, 2*4, 2*5, 2*6, 2*7, 2*8, 2*9]
trubadur = ['Трубадур']
animals = ['Кот', 'Пёс', 'Осёл', 'Петух']
bremen_musicians = trubadur + animals
print(bremen_musicians)
count = len(bremen_musicians) 
#Для подсчёта элементов списка есть стандартная функция len().
print(count)
# for переменная in список_элементов: # Вот оно, объявление цикла
        # Тут будет тело цикла. 

bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух', "Балбес"]
# Код цикла
for animal in bremen_musicians:
    # Каждый элемент списка bremen_musicians 
    # по очереди будет передан в переменную musician
    # и напечатан
    print(animal)

# Код, который выполняется после цикла
print('Нам дворцов заманчивые своды не заменят никогда свободы!')


three = range(0, 3)
# Последовательность three будет включать в себя числа 0, 1 и 2.
# Тройка в эту последовательность не войдёт: 
# последнее число в последовательность не включается.  
round_zero = range(-3, 3)
# Последовательность around_zero будет включать в себя числа -3, -2, -1, 0, 1 и 2.
# 
# around_zero = range(-3, 3)

# Вместо списка в цикл передаётся переменная around_zero, 
# в ней хранится range() от -3 до 3
for i in around_zero:
    # Перебрать все числа в диапазоне от -3 до 3 и напечатать их:
    print(i)
# Будет напечатано
# -3
# -2
# -1
# 0
# 1
# 2  

for i in range(1,5):
	print('Я расправлюсь с задачей', str(i))

print('Я всех победю!')

Список задом наперёд
Если нужно пройтись по списку или по диапазону чисел в обратном порядке — вызывайте функцию reversed(): она переворачивает и список, и диапазон; чтение любой последовательности начнётся с конца.
Вот, например, симулятор новогодних курантов.
Функция range() не включает в последовательность чисел второй аргумент, так что для reversed(range(1, 13)) отсчёт начнётся с 12.
Код
PYTHON
1
for i in reversed(range(1, 13)):
2
    print(i, 'бомм!')
3
​
4
print('C новым годом!')

Функция reversed() может развернуть в обратном направлении любую последовательность:
# Можно обратить вспять обычный список: 
seasons = ['зима', 'весна', 'лето', 'осень']

for season in reversed(seasons):  
    # Переменную цикла, в которую 
    # будут передаваться элементы "перевёрнутого" списка seasons,
    # назовём season
    print(season) 

    Результат проверки передаётся особыми логическими значениями True или False.
Чтобы узнать, истинно или ложно утверждение, сохраним выражение в переменной с именем check и выведем её значение на экран.
Проверим, считает ли Python истинными выражения «дважды два больше шести» и «дважды два — четыре».
check = (2*2 > 6)
print(check)

# Будет напечатано: False 
Ветвление объявляют оператором if. После if пишут условие — логическое выражение, результатом которого может быть True или False.
Если выражение в условии истинно, то выполняется код, написанный после двоеточия. Если ложно, код после условия не сработает.
if <условие>:
    <код, который выполнится, если условие вернуло True> 
    # Внимание: код после if должен быть отбит от начала строки 4-мя пробелами 