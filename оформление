
print("hello \"hhgmmgh\"")
print("\n")
print("sddd\nfsdfff\nfdgfg\n1324")
print ('- Did Joffrey agree?\n- He did. He also said "I love using \\n".')


a= "Привет"
b= "сткденты"
print(f'{a}, {b}!')  #Буква f указывает на то, что мы создаем f-строку — шаблон, в который с помощью фигурных скобок подставляются значения переменных. 
На выходе получается обычная строка.


Для таких ситуаций в Python есть еще один способ создания 
строк, который называется multi-line строки. Чтобы описать т
акую «многострочную строку», нужно заключить ее в 
тройные кавычки — """ или '''. Внутри multi-line строки можно
 переносить текст и не использовать перевод строки \n:

text = '''Пример текста,
состоящего из
нескольких строк
'''
Пример текста,
состоящего из
нескольких строк

Обратите внимание, что в конце текста есть пустая строка. Она появилась в тексте потому, что мы поставили закрывающие кавычки ''' на новой строке. Если не переносить закрывающие кавычки на новую строку, то пустая строка в тексте не появится:

text = '''Пример текста,
состоящего из
нескольких строк'''
Пример текста,
состоящего из
нескольких строк
Из-за тройных кавычек multi-line строки позволяют не экранировать кавычки внутри строки:

Здесь не нужно экранировать 'одинарные' и "двойные" кавычки
Еще multi-line строки могут становиться f-строками для интерполяции:

a = 'A'
b = 'B'

# Слева добавился f
text = f'''{a} и {b}
сидели на трубе
'''
А и B
сидели на трубе


# BEGIN
print(f'''Do you want to eat, {stark}?
Yes, I'm hungry, mom.''')
# END


print(*result,sep=',')     # распаковка списка  . sep =',' разделитель


# 2.Для натурального n создать список, состоящий 
# из элементов последовательности 3n + 1.
#     Пример:
#     - Для n = 6: [4, 7, 10, 13, 16, 19]


n = int(input("Введите число"))
result = []
for i in range(1,n+1):
    result.append(3*i+1)
print(*result,sep=',')     # распаковка списка  . sep =',' разделитель